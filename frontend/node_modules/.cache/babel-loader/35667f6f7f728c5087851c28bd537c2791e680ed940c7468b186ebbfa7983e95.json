{"ast":null,"code":"const express = require('express');\nconst mysql = require('mysql2');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst port = 5000;\n\n// Database connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  // ganti dengan user Anda\n  password: '',\n  // ganti dengan password Anda\n  database: 'penjualan_db'\n});\ndb.connect(err => {\n  if (err) throw err;\n  console.log('Connected to the database!');\n});\napp.use(cors());\napp.use(bodyParser.json());\n\n// Endpoint untuk mendapatkan semua data penjualan\napp.get('/api/penjualan', (req, res) => {\n  const sql = `\n    SELECT p.id_produk, p.nama_barang, p.stok, j.jenis_barang, t.jumlah_terjual, t.tanggal_transaksi\n    FROM transaksi t\n    JOIN produk p ON t.produk_id = p.id_produk\n    JOIN jenis_barang j ON p.jenis_barang_id = j.id_jenis_barang\n  `;\n  db.query(sql, (err, results) => {\n    if (err) throw err;\n    res.json(results);\n  });\n});\n\n// Endpoint untuk menambahkan data penjualan\napp.post('/api/penjualan', (req, res) => {\n  const {\n    nama_barang,\n    stok,\n    jenis_barang,\n    jumlah_terjual,\n    tanggal_transaksi\n  } = req.body;\n  db.query('SELECT id_jenis_barang FROM jenis_barang WHERE jenis_barang = ?', [jenis_barang], (err, results) => {\n    var _results$;\n    if (err) throw err;\n    const jenis_barang_id = (_results$ = results[0]) === null || _results$ === void 0 ? void 0 : _results$.id_jenis_barang;\n    if (jenis_barang_id) {\n      db.query('INSERT INTO produk (nama_barang, stok, jenis_barang_id) VALUES (?, ?, ?)', [nama_barang, stok, jenis_barang_id], (err, result) => {\n        if (err) throw err;\n        const produk_id = result.insertId;\n        db.query('INSERT INTO transaksi (produk_id, jumlah_terjual, tanggal_transaksi) VALUES (?, ?, ?)', [produk_id, jumlah_terjual, tanggal_transaksi], (err, result) => {\n          if (err) throw err;\n          res.status(201).json(result);\n        });\n      });\n    } else {\n      res.status(400).json({\n        message: 'Jenis barang tidak ditemukan'\n      });\n    }\n  });\n});\n\n// Endpoint untuk mengupdate data penjualan\napp.put('/api/penjualan/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    nama_barang,\n    stok,\n    jenis_barang,\n    jumlah_terjual,\n    tanggal_transaksi\n  } = req.body;\n  db.query('SELECT id_jenis_barang FROM jenis_barang WHERE jenis_barang = ?', [jenis_barang], (err, results) => {\n    var _results$2;\n    if (err) throw err;\n    const jenis_barang_id = (_results$2 = results[0]) === null || _results$2 === void 0 ? void 0 : _results$2.id_jenis_barang;\n    if (jenis_barang_id) {\n      db.query('UPDATE produk SET nama_barang = ?, stok = ?, jenis_barang_id = ? WHERE id_produk = ?', [nama_barang, stok, jenis_barang_id, id], (err, result) => {\n        if (err) throw err;\n        db.query('UPDATE transaksi SET jumlah_terjual = ?, tanggal_transaksi = ? WHERE produk_id = ?', [jumlah_terjual, tanggal_transaksi, id], (err, result) => {\n          if (err) throw err;\n          res.json(result);\n        });\n      });\n    } else {\n      res.status(400).json({\n        message: 'Jenis barang tidak ditemukan'\n      });\n    }\n  });\n});\n\n// Endpoint untuk menghapus data penjualan\napp.delete('/api/penjualan/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  db.query('DELETE FROM transaksi WHERE produk_id = ?', [id], (err, result) => {\n    if (err) throw err;\n    db.query('DELETE FROM produk WHERE id_produk = ?', [id], (err, result) => {\n      if (err) throw err;\n      res.status(200).json({\n        message: 'Data berhasil dihapus'\n      });\n    });\n  });\n});\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","mysql","cors","bodyParser","app","port","db","createConnection","host","user","password","database","connect","err","console","log","use","json","get","req","res","sql","query","results","post","nama_barang","stok","jenis_barang","jumlah_terjual","tanggal_transaksi","body","_results$","jenis_barang_id","id_jenis_barang","result","produk_id","insertId","status","message","put","id","params","_results$2","delete","listen"],"sources":["C:/Users/Ilham Ripandi/Documents/Project/my-app/src/pages/Home.jsx"],"sourcesContent":["const express = require('express');\r\nconst mysql = require('mysql2');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Database connection\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root', // ganti dengan user Anda\r\n  password: '', // ganti dengan password Anda\r\n  database: 'penjualan_db'\r\n});\r\n\r\ndb.connect((err) => {\r\n  if (err) throw err;\r\n  console.log('Connected to the database!');\r\n});\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Endpoint untuk mendapatkan semua data penjualan\r\napp.get('/api/penjualan', (req, res) => {\r\n  const sql = `\r\n    SELECT p.id_produk, p.nama_barang, p.stok, j.jenis_barang, t.jumlah_terjual, t.tanggal_transaksi\r\n    FROM transaksi t\r\n    JOIN produk p ON t.produk_id = p.id_produk\r\n    JOIN jenis_barang j ON p.jenis_barang_id = j.id_jenis_barang\r\n  `;\r\n  \r\n  db.query(sql, (err, results) => {\r\n    if (err) throw err;\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Endpoint untuk menambahkan data penjualan\r\napp.post('/api/penjualan', (req, res) => {\r\n  const { nama_barang, stok, jenis_barang, jumlah_terjual, tanggal_transaksi } = req.body;\r\n  \r\n  db.query('SELECT id_jenis_barang FROM jenis_barang WHERE jenis_barang = ?', [jenis_barang], (err, results) => {\r\n    if (err) throw err;\r\n    \r\n    const jenis_barang_id = results[0]?.id_jenis_barang;\r\n    \r\n    if (jenis_barang_id) {\r\n      db.query('INSERT INTO produk (nama_barang, stok, jenis_barang_id) VALUES (?, ?, ?)', \r\n        [nama_barang, stok, jenis_barang_id], (err, result) => {\r\n          if (err) throw err;\r\n          \r\n          const produk_id = result.insertId;\r\n          db.query('INSERT INTO transaksi (produk_id, jumlah_terjual, tanggal_transaksi) VALUES (?, ?, ?)', \r\n            [produk_id, jumlah_terjual, tanggal_transaksi], (err, result) => {\r\n              if (err) throw err;\r\n              res.status(201).json(result);\r\n            });\r\n        });\r\n    } else {\r\n      res.status(400).json({ message: 'Jenis barang tidak ditemukan' });\r\n    }\r\n  });\r\n});\r\n\r\n// Endpoint untuk mengupdate data penjualan\r\napp.put('/api/penjualan/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  const { nama_barang, stok, jenis_barang, jumlah_terjual, tanggal_transaksi } = req.body;\r\n\r\n  db.query('SELECT id_jenis_barang FROM jenis_barang WHERE jenis_barang = ?', [jenis_barang], (err, results) => {\r\n    if (err) throw err;\r\n    \r\n    const jenis_barang_id = results[0]?.id_jenis_barang;\r\n    \r\n    if (jenis_barang_id) {\r\n      db.query('UPDATE produk SET nama_barang = ?, stok = ?, jenis_barang_id = ? WHERE id_produk = ?', \r\n        [nama_barang, stok, jenis_barang_id, id], (err, result) => {\r\n          if (err) throw err;\r\n          \r\n          db.query('UPDATE transaksi SET jumlah_terjual = ?, tanggal_transaksi = ? WHERE produk_id = ?', \r\n            [jumlah_terjual, tanggal_transaksi, id], (err, result) => {\r\n              if (err) throw err;\r\n              res.json(result);\r\n            });\r\n        });\r\n    } else {\r\n      res.status(400).json({ message: 'Jenis barang tidak ditemukan' });\r\n    }\r\n  });\r\n});\r\n\r\n// Endpoint untuk menghapus data penjualan\r\napp.delete('/api/penjualan/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  \r\n  db.query('DELETE FROM transaksi WHERE produk_id = ?', [id], (err, result) => {\r\n    if (err) throw err;\r\n    db.query('DELETE FROM produk WHERE id_produk = ?', [id], (err, result) => {\r\n      if (err) throw err;\r\n      res.status(200).json({ message: 'Data berhasil dihapus' });\r\n    });\r\n  });\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}